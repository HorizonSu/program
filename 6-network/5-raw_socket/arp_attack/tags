!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ATK_BLACK	main.c	5;"	d	file:
ATK_SINGLE	main.c	3;"	d	file:
ATK_WHITE	main.c	4;"	d	file:
BUFF_SIZE	main.c	7;"	d	file:
CC	Makefile	/^CC:= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS:= -Wall -O2 -c$/;"	m
DEBUG	arp.h	26;"	d
DEV_NAME	arp.h	24;"	d
GATEWAY	arp.h	23;"	d
IP4_LEN	arp.h	22;"	d
MAC_LEN	arp.h	21;"	d
__ARP_H__	arp.h	2;"	d
__HEAD_H__	netdevice.h	2;"	d
_attack_lists_	main.c	/^typedef struct _attack_lists_{$/;"	s	file:
_attack_lists_::atk_list	main.c	/^	unsigned int *atk_list;		\/* what do you want to attack ip *\/$/;"	m	struct:_attack_lists_	file:	access:public
_attack_lists_::atk_num	main.c	/^	int atk_num;				\/* the numbers of ip address *\/$/;"	m	struct:_attack_lists_	file:	access:public
_attack_lists_::atk_type	main.c	/^	int atk_type;				\/* the type of attack*\/$/;"	m	struct:_attack_lists_	file:	access:public
arp_attack	main.c	/^int arp_attack(atklist_st *atklist);$/;"	p	file:	signature:(atklist_st *atklist)
arp_attack	main.c	/^int arp_attack(atklist_st *atklist){$/;"	f	signature:(atklist_st *atklist)
atk_list	main.c	/^	unsigned int *atk_list;		\/* what do you want to attack ip *\/$/;"	m	struct:_attack_lists_	file:	access:public
atk_num	main.c	/^	int atk_num;				\/* the numbers of ip address *\/$/;"	m	struct:_attack_lists_	file:	access:public
atk_type	main.c	/^	int atk_type;				\/* the type of attack*\/$/;"	m	struct:_attack_lists_	file:	access:public
atklist_st	main.c	/^}atklist_st;$/;"	t	typeref:struct:_attack_lists_	file:
error_exit	arp.h	19;"	d
get_attack_list	main.c	/^int get_attack_list(atklist_st *atklist)$/;"	f	signature:(atklist_st *atklist)
get_attack_list	main.c	/^int get_attack_list(atklist_st *atklist);$/;"	p	file:	signature:(atklist_st *atklist)
gethwaddr	netdevice.c	/^int gethwaddr(const char *devname, struct sockaddr * addr_buff)$/;"	f	signature:(const char *devname, struct sockaddr * addr_buff)
gethwaddr	netdevice.h	/^extern int gethwaddr(const char * devname, struct sockaddr * addr_buff);$/;"	p	signature:(const char * devname, struct sockaddr * addr_buff)
getifindex	netdevice.c	/^int getifindex(const char *devname)$/;"	f	signature:(const char *devname)
getifindex	netdevice.h	/^extern int getifindex(const char *devname);$/;"	p	signature:(const char *devname)
getipaddr	netdevice.c	/^int getipaddr(const char *devname, struct sockaddr * addr_buff)$/;"	f	signature:(const char *devname, struct sockaddr * addr_buff)
getipaddr	netdevice.h	/^extern int getipaddr(const char * devname, struct sockaddr * addr_buff);$/;"	p	signature:(const char * devname, struct sockaddr * addr_buff)
main	arp.c	/^int main(int argc, const char **argv)$/;"	f	signature:(int argc, const char **argv)
main	main.c	/^int main()$/;"	f
send_arp	arp.c	/^int send_arp(int sockfd, unsigned int ip4_sender, unsigned int ip4_target)$/;"	f	signature:(int sockfd, unsigned int ip4_sender, unsigned int ip4_target)
send_arp	arp.h	/^extern int send_arp(int sockfd, unsigned int sender, unsigned int target);$/;"	p	signature:(int sockfd, unsigned int sender, unsigned int target)
show_mem	main.c	/^int show_mem(void)$/;"	f	signature:(void)
